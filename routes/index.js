// Generated by CoffeeScript 1.3.3
(function() {
  var Hashids, Project, Task, db, findHashtags, hashids, mongoose, projectSchema, schema;

  mongoose = require('mongoose');

  db = mongoose.createConnection('localhost', 'test');

  schema = mongoose.Schema({
    name: {
      type: 'string'
    },
    state: {
      type: 'Number',
      "default": 1
    },
    isRemoved: {
      type: 'Boolean',
      "default": false
    },
    isDeleted: {
      type: 'Boolean',
      "default": false
    },
    projectId: {
      type: 'ObjectId'
    },
    hashtags: {
      type: Array,
      "default": []
    }
  });

  Task = db.model('Task', schema);

  projectSchema = mongoose.Schema({
    name: {
      type: 'string'
    },
    isPublic: {
      type: 'Boolean'
    },
    hash: {
      type: 'string',
      index: {
        unique: true,
        dropDups: true
      }
    },
    email: {
      type: 'string',
      index: true
    }
  });

  Project = db.model('Project', projectSchema);

  Hashids = require("hashids");

  hashids = new Hashids("tohle je muj scrum project");

  exports.index = function(req, res) {
    if (req.user != null) {
      return res.render('index', {
        email: req.user.email,
        name: req.user.name
      });
    } else {
      return res.render('index', {
        email: '',
        name: ''
      });
    }
  };

  exports.todo = function(req, res) {
    var email;
    if (req.params.project != null) {
      email = '';
      if (req.user != null) {
        email = req.user.email;
      }
      return Project.findOne({
        hash: req.params.project,
        $or: [
          {
            email: email
          }, {
            email: ''
          }
        ]
      }, function(err, project) {
        if (project) {
          if (err) {
            console.log(err);
          }
          if ((req.params.tag != null) && req.params.tag !== '') {
            return Task.find({
              state: 1,
              projectId: project._id,
              hashtags: {
                $in: [req.params.tag]
              }
            }, function(err, tasks) {
              return res.json(tasks);
            });
          } else {
            return Task.find({
              state: 1,
              projectId: project._id
            }, function(err, tasks) {
              return res.json(tasks);
            });
          }
        } else {
          return res.json([]);
        }
      });
    } else {
      return res.json([]);
    }
  };

  exports.inprogress = function(req, res) {
    var email;
    if (req.params.project != null) {
      email = '';
      if (req.user != null) {
        email = req.user.email;
      }
      return Project.findOne({
        hash: req.params.project,
        $or: [
          {
            email: email
          }, {
            email: ''
          }
        ]
      }, function(err, project) {
        if (project) {
          if (err) {
            console.log(err);
          }
          if ((req.params.tag != null) && req.params.tag !== '') {
            return Task.find({
              state: 2,
              projectId: project._id,
              hashtags: {
                $in: [req.params.tag]
              }
            }, function(err, tasks) {
              return res.json(tasks);
            });
          } else {
            return Task.find({
              state: 2,
              projectId: project._id
            }, function(err, tasks) {
              return res.json(tasks);
            });
          }
        } else {
          return res.json([]);
        }
      });
    } else {
      return res.json([]);
    }
  };

  exports.done = function(req, res) {
    var email;
    if (req.params.project != null) {
      email = '';
      if (req.user != null) {
        email = req.user.email;
      }
      return Project.findOne({
        hash: req.params.project,
        $or: [
          {
            email: email
          }, {
            email: ''
          }
        ]
      }, function(err, project) {
        if (project) {
          if (err) {
            console.log(err);
          }
          if ((req.params.tag != null) && req.params.tag !== '') {
            return Task.find({
              state: 3,
              projectId: project._id,
              hashtags: {
                $in: [req.params.tag]
              }
            }, function(err, tasks) {
              return res.json(tasks);
            });
          } else {
            return Task.find({
              state: 3,
              projectId: project._id
            }, function(err, tasks) {
              return res.json(tasks);
            });
          }
        } else {
          return res.json([]);
        }
      });
    } else {
      return res.json([]);
    }
  };

  exports.save = function(req, res) {
    var email;
    email = '';
    if (req.user != null) {
      email = req.user.email;
    }
    return Project.findOne({
      hash: req.params.project,
      $or: [
        {
          email: email
        }, {
          email: ''
        }
      ]
    }, function(err, project) {
      var hashtags, newTask;
      hashtags = findHashtags(req.body.name);
      newTask = new Task({
        name: req.body.name,
        state: 1,
        isRemoved: false,
        isDeleted: false,
        projectId: project._id,
        hashtags: hashtags
      });
      return newTask.save(function(err) {
        if (err) {
          console.log(err);
        }
        return res.json({
          id: newTask._id,
          name: req.body.name,
          hashtags: hashtags
        });
      });
    });
  };

  exports.makeInProgress = function(req, res) {
    return Task.findOne({
      _id: req.body.id
    }, function(err, task) {
      task.state = 2;
      return task.save(function(err) {
        if (err) {
          console.log(err);
        }
        return res.json({});
      });
    });
  };

  exports.makeDone = function(req, res) {
    return Task.findOne({
      _id: req.body.id
    }, function(err, task) {
      task.state = 3;
      return task.save(function(err) {
        if (err) {
          console.log(err);
        }
        return res.json({});
      });
    });
  };

  exports.makeTodo = function(req, res) {
    return Task.findOne({
      _id: req.body.id
    }, function(err, task) {
      task.state = 1;
      return task.save(function(err) {
        if (err) {
          console.log(err);
        }
        return res.json({});
      });
    });
  };

  exports.remove = function(req, res) {
    return Task.findOne({
      _id: req.body.id
    }, function(err, task) {
      return task.remove(function(err) {
        if (err) {
          console.log(err);
        }
        return res.json({});
      });
    });
  };

  exports.info = function(req, res) {
    var email;
    if (req.params.project != null) {
      email = '';
      if (req.user != null) {
        email = req.user.email;
      }
      return Project.findOne({
        hash: req.params.project,
        $or: [
          {
            email: email
          }, {
            email: ''
          }
        ]
      }, function(err, project) {
        if (project) {
          return res.json({
            Exists: true,
            name: project.name
          });
        } else {
          return res.json({
            Exists: false
          });
        }
      });
    } else {
      return res.json({
        Exists: false
      });
    }
  };

  exports.createProject = function(req, res) {
    var hash, newProject, userEmail;
    if ((req.body.name != null) && req.body.name !== '') {
      hash = hashids.encrypt(new Date().valueOf());
      userEmail = '';
      if ((req.user != null) && req.body.ispersonal) {
        userEmail = req.user.email;
      }
      newProject = new Project({
        name: req.body.name,
        isPublic: true,
        hash: hash,
        email: userEmail
      });
      console.log(newProject);
      return newProject.save(function(err) {
        var hashtags, newTask, txt;
        if (err) {
          console.log(err);
        }
        txt = "Drag me to change my state.";
        hashtags = findHashtags(txt);
        newTask = new Task({
          name: txt,
          state: 1,
          isRemoved: false,
          isDeleted: false,
          projectId: newProject._id,
          hashtags: hashtags
        });
        return newTask.save(function(err) {
          if (err) {
            console.log(err);
          }
          txt = "Filter tasks like me using #hashtags";
          hashtags = findHashtags(txt);
          newTask = new Task({
            name: txt,
            state: 2,
            isRemoved: false,
            isDeleted: false,
            projectId: newProject._id,
            hashtags: hashtags
          });
          return newTask.save(function(err) {
            if (err) {
              console.log(err);
            }
            txt = "You can edit or delete me. #hashtags";
            hashtags = findHashtags(txt);
            newTask = new Task({
              name: txt,
              state: 3,
              isRemoved: false,
              isDeleted: false,
              projectId: newProject._id,
              hashtags: hashtags
            });
            return newTask.save(function(err) {
              if (err) {
                console.log(err);
              }
              return res.json({
                hash: hash
              });
            });
          });
        });
      });
    }
  };

  exports.update = function(req, res) {
    return Task.findOne({
      _id: req.body.id
    }, function(err, task) {
      task.name = req.body.name;
      task.hashtags = findHashtags(req.body.name);
      return task.save(function(err) {
        if (err) {
          console.log(err);
        }
        return res.json({});
      });
    });
  };

  exports.projects = function(req, res) {
    if (req.user != null) {
      return Project.find({
        email: req.user.email
      }, function(err, projects) {
        return res.json(projects);
      });
    } else {
      return res.json({});
    }
  };

  findHashtags = function(txt) {
    var outTags, tag, tags, _i, _len;
    tags = txt.match(/(#[A-Za-z0-9\-\_]+)/g) || [];
    outTags = [];
    for (_i = 0, _len = tags.length; _i < _len; _i++) {
      tag = tags[_i];
      outTags.push(tag.replace(/\#/g, ''));
    }
    return outTags;
  };

  exports.dashboard = function(req, res) {
    return res.render('dashboard', {
      email: req.user.email,
      name: req.user.name
    });
  };

}).call(this);
